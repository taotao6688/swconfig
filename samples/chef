#!/usr/bin/env python
import json
import logging
import os
import subprocess
import sys

WORKING_DIR = os.environ.get('HEAT_SCRIPT_WORKING',
                             '/var/lib/heat-config/heat-config-chef')
OUTPUTS_DIR = os.environ.get('HEAT_SCRIPT_OUTPUTS',
                             '/var/run/heat-config/heat-config-chef')


def prepare_dir(path):
    if not os.path.isdir(path):
        os.makedirs(path, 0o700)


def main(argv=sys.argv):
    log = logging.getLogger('heat-config')
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(
        logging.Formatter(
            '[%(asctime)s] (%(name)s) [%(levelname)s] %(message)s'))
    log.addHandler(handler)
    log.setLevel('DEBUG')

    prepare_dir(OUTPUTS_DIR)
    prepare_dir(WORKING_DIR)
    os.chdir(WORKING_DIR)

    c = json.load(sys.stdin)

    env = os.environ.copy()
    for input in c['inputs']:
        input_name = input['name']
        env[input_name] = input.get('value', '')
        log.info('%s=%s' % (input_name, env[input_name]))

    fn1 = "mkdir /etc/chef"
    log_fn1 = "echo \"" + fn1 + "\" >>/tmp/1.txt"
    os.system(log_fn1)
    returncode1 = os.system(fn1)

    fn2 = "curl " + env["CHEF_VALID_PEM_URL"] + " > /etc/chef/validation.pem"
    log_fn2 = "echo \"" + fn2 + "\" >>/tmp/1.txt"
    os.system(log_fn2)
    returncode2 = os.system(fn2)


    heat_outputs_path = os.path.join(OUTPUTS_DIR, c['id'])
    env['heat_outputs_path'] = heat_outputs_path

    #with os.fdopen(os.open(fn, os.O_CREAT | os.O_WRONLY, 0o700), 'w') as f:
    #    f.write(c.get('config', ''))

    fn = "chef-client -E \"" + env["CHEF_ENV"] + "\" -r \"" + env["CHEF_RUN_LIST"] + "\" -S \"https://" + env["CHEF_SERVER_IP"] + "\" >> /tmp/1.txt"
    #returncode = os.system(fn)

    print "[CHEF_HOOK] Running " + fn
    log.debug('Running %s' % fn)
    #subproc = subprocess.Popen([fn], stdout=subprocess.PIPE,
    #                           stderr=subprocess.PIPE, env=env)
    subproc = subprocess.Popen(fn, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    stdout, stderr = subproc.communicate()

    log.info(stdout)
    log.debug(stderr)

    print "[CHEF_HOOK] " + stdout
    print "[CHEF_HOOK] " + stderr

    if subproc.returncode:
    	print "[CHEF_HOOK] Error..."
        log.error("Error running %s. [%s]\n" % (fn, returncode))
    else:
    	print "[CHEF_HOOK] Success..."
        log.info('Completed %s' % fn)

    response = {}

    for output in c.get('outputs') or []:
        output_name = output['name']
        try:
            with open('%s.%s' % (heat_outputs_path, output_name)) as out:
                response[output_name] = out.read()
        except IOError:
            pass

    response.update({
	'result': stdout,
        'deploy_stdout': stdout,
        'deploy_stderr': stderr,
        'deploy_status_code': subproc.returncode,
    })

    json.dump(response, sys.stdout)

if __name__ == '__main__':
    sys.exit(main(sys.argv))
